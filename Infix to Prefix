

class Solution {
    static int Prece(char c)
    {
        switch(c)
        {
            case '+':
            case'-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
                    
        }
        return -1;
    }
    static String infixtoprefix(String pre_exp) {
        StringBuilder sb= new StringBuilder(pre_exp);
        
        sb.reverse();int i=0;
        while(i<pre_exp.length())
        {
            if(sb.charAt(i)==')')
            {
                sb.setCharAt(i,'(');
            }
            if(sb.charAt(i)=='(')
            {
                sb.setCharAt(i,')');
            }
            i++;
        }
        Stack <Character> st= new Stack<>();
        int j=0;String ans="";
        while(j<sb.length())
        {
            char c=sb.charAt(j);
            if(Character.isLetterOrDigit(c))
            {
                ans+=c;
            }
            else if(c=='(')
            {
                st.push(c);
            }
            else if(c==')')
            {
                while(!st.isEmpty() && st.peek()!='(')
                {
                    ans+=st.pop();
                }
                st.pop();
            }
            if(c=='^')
            {
                while(!st.isEmpty() && Prece(c)<=Prece(st.peek()))
                {
                    ans+=st.pop();
                }
                st.push(c);
            }
            else{
                while(!st.isEmpty() && Prece(c)< Prece(st.peek()))
                {
                    ans+=st.pop();
                }
                st.push(c);
            }
            j++;
        }
        StringBuilder v= new StringBuilder(ans);
        v.reverse();
        return v.toString();
        
    }
}
